Styles: |
    /*GA+GWO example*/
    #trans-box .item,#trans-items,#trans-id {clear:both}
    #trans-items span {width:15%;display:block;float:left}
    #trans-id span {display:block;float:left;margin-right:20px}



    /*Google maps example*/
    .clear-none {clear:none}
    .content-right-column {border:1px solid #CCC; margin-left:20px;float:right;clear:none;width:500px}
    .content-right-column dl, .content-right-column H3, .content-right-column figcaption{padding-left:20px;}
    .content-right-column * {clear:none}
    .content-left-column * {clear:none}
    .content-right-column #chicago-theft-yrs {width:490px; height:800px;margin:0 0 1em 5px}
    .content-right-column #thefts-map-legend dt, .content-right-column #thefts-map-legend dd{display:inline}

    /*slideshow tutorial*/
    .post-323 #slideshow{height:187px;width:167px;overflow:hidden;}

    /*fisheye*/
    .post-601 .fisheye-grid{height:490px;width:650px}
    .post-601 .kitten-grid{height:310px;width:410px}
    .post-601 .kitten-grid img{height:100%;width:100%}
    .post-601 .date-bar{background-color:#880;margin:2px;text-align:right;font-weight:700;color:white}
    .post-601 .fisheye-row {width:100%;clear:both}
    .post-601 .fisheye-cell {margin:1px;background-color:#DDD;float:left;clear:none}

    /*fisheye spine example */

    /*Grid styling.  Currently required for the fisheye plugin.*/
    .post-645 .campaign-grid { width:610px; height:460px }
    .post-645 .fisheye-row { clear: both; width: 100% }
    .post-645 .fisheye-cell { background-color: #DDDDDD; clear: none; float: right; margin: 1px; cursor: cell }
    .post-645 .fisheye-cell div { display:inline }
    .post-645 .adgroup-row {padding-top:10px}


    .post-645 #campaign-grid0 img.cell-sparkChart{display:block; float:right;clear:none;margin:2px 2px 0 0}


    .post-645 .cell-chart1,
    .post-645 img.cell-sparkChart,
    .post-645 #campaign-grid0.expanded img.cell-sparkChart,
    .post-645 #campaign-grid0.shrink img.cell-sparkChart,
    .post-645 .span-keyword,
    .post-645 .span-ctr,
    .post-645 div.cell-red-toggle,
    .post-645 .activeColGrowing img,
    .post-645 .activeRowGrowing img,
    .post-645 .activeColShrinking img,
    .post-645 .activeRowShrinking img,
    .post-645 .maxHeightLock.maxWidthLock .cell-sparkChart {display:none}

    .post-645 .cell-campaign {background-color: #CAADA4;}
    .post-645 .cell-adgroup  {background-color: #AC97DA;}
    .post-645 .cell-keyword {background-color: #BFD3A1;}






    .post-645 .expanded .fisheye-cell {font-size:80%;}
    .post-645 .maxHeightLock.maxWidthLock > * {display:block;font-size:200%;clear:none;margin:5px}
    .post-645 .maxHeightLock.maxWidthLock.cell-keyword span  {display:inline}

    .post-645 .maxHeightLock.maxWidthLock > .cell-chart1 {display:block;float:right;clear:none;}

    .post-645 .span-red{cursor:pointer;border-bottom: 1px dashed #000;}
    .post-645 .redColor {color:#D00;}

Pages:
  About: |
    <p>Curiosity leads to curious places.</p>
    <p>I&#39;m currently a steering committee member for BostonCHI and am collaboratively starting the Boston brain-machine interaction group.</p>
    <p>My background includes two years in the medical field, another two in mental health, one year founding a nonprofit, and six years in IT related roles including network administration, user experience design, knowledge management, public/private partnerships, information architecture, business process research/design/automation, volunteer management, online community management, user interface design, web site and applications development, analytics, and site optimization.</p>
    <p>My goal is to improve human well-being by enabling systems that meet human needs with continually improving effectiveness, efficiency, and efficacy... and to be playful in the pursuit!</p>
    <p>Other info:</p>
    <p><a href="http://www.linkedin.com/profile/view?id=11468038" target="_blank">LinkedIn</a><br />
    	<a href="http://twitter.com/a_laughlin" target="_blank">Twitter</a><br />
    	<a href="https://plus.google.com/107662649138779191300" target="_blank">Google+</a></p>
Posts:
  Something - An Experimental User Experience / Interaction Design Framework: |
        interaction intents papers
        design of everyday things interaction steps
        blend of the two - interaction steps for each interaction intent
  Fisheye Grids - A User Interface Design Pattern: |
        from http://a-laughlin.com/?p=601
        <p>While perusing the University of Maryland&#39;s Human-Computer Interaction Lab site, I ran into an interesting interface named <a href="http://www.cs.umd.edu/hcil/fishcal/publications.shtml">Datelens</a>. It improves mobile calendar usability, especially on complex tasks like date comparisons.</p>
        <p>While Datelens is tied to Outlook/calendars, the fisheye grid UI pattern is more broadly applicable.&nbsp; Uses include any information seeking scenario where users want to zoom in on some information while retaining some context. Concrete uses include replacements for carousels, slideshows, calendars, shopping carts, and many of the ubiquitous modal (popup) window implementations.</p>
        <p>Despite the benefits I haven&#39;t seen the grid pattern in any web apps, so I prototyped a jQuery plugin to play with it.&nbsp; Click below to expand example cells.  Clicking a closed cell when one is open will transition to that cell.</p>
        <p>For the source, see <a href="https://gist.github.com/1413900">Github</a>.&nbsp; For the research, here&#39;s a <a href="http://hubscher.org/roland/courses/hf765/readings/p90-b_bederson.pdf">PDF</a>. If you use it some where, I&#39;d love to hear how your UX analytics data compares with other info zooming methods.</p>
        <p>Note - As it's only a prototype, I haven't tested it in IE.</p>
        <h2>Example Calendar Grid</h2>
        <div id="fisheye-grid">&nbsp;</div>
        <h2>&nbsp;</h2>
        <h2>Example Image Grid</h2>
        <div id="kitten-grid">&nbsp;</div>
        <div>&nbsp;</div>
  Staging Server - Fast and Free: |
        <p>Staging environments can be expensive in time and materials.&nbsp; Turns out there&#39;s a way to bypass all of that for testing JavaScript.&nbsp; It&#39;s also easy to learn, quick to implement, works across platforms and browsers, and best of all, free.</p>
        <h2>Test Your Code On Your Live Site!</h2>
        <p>No kidding.  Using a file loader like <a href="http://requirejs.org/" target="_blank">Require.js</a>, you can get a JavaScript staging environment running in less time than it takes to decide on a physical server. Here&#39;s how:</p>
        <pre>
        //if you don't already have a namespace, create one to keep things tidy.
        var foo={};

        // List the live files you would normally load.
        foo.loadFilesStr="file1.js,file2.js,file3.js";

        // Get your favorite cookie reading function.  Here's one I use.
        foo.strToObj=function(str,keySplit,pairSplit){var y={},k=keySplit||'&',fn=k.substr?'split':'match',a=str[fn](k),i=0,p,L=a.length;for(;L>i;i++){p=a[i][fn](pairSplit||'=');y[p[0]]=p[1]||''}return y};

        // Pick a cookie name.  "devEnv" works.
        foo.devCookieName= 'devEnv';

        // Read the cookies
        foo.cookie = foo.strToObj( document.cookie, '; ', '=');

        // get the dev cookie's value.
        foo.devCookieVal=foo.cookie[foo.devCookieName];

        // if a value exists, replace your normal files with a string of files from the cookie
        if( foo.devCookieVal ){ foo.loadFilesStr = foo.devCookieVal.split(',') }

        // make them an array to prep them for your favorite script loader.
        foo.loadFilesArray=foo.loadFilesStr.split(',');

        // and load the scripts.
        require(foo.loadFilesStr, function(){
            $(document).ready(function(){ do stuff here })
        });
        </pre>
        <p>Finally, change the files you want to load with a bookmarklet that displays and sets the cookie values, like this one.</p>
        <pre>
        javascript:(function(foo,cookieName){
          var cookieVal=foo.cookie[cookieName]||'',
          filesArray = cookieVal.split(','), // get the cookie value
          i=0, // set an iterator
          L=filesArray.length, // and a length for the files array
          tempStr='', // and a temporary string to append file names to for display
          userEnteredStr = (function () {
            for (;L>i;i++) { // loop over file names
              (tempStr += ('nn' + filesArray[i])); // append them for display
            }
            var reply = prompt ( // prompt for any changes
              cookieName + ' will be set to the following paths:' + tempStr +
              'nnChange the cookie value below to alter them. '+
              'Leave blank or cancel to remove the cookie',
              cookieVal // display the val if one exists
            );
            return reply;
          })(),
          expir = (userEnteredStr ? (new Date((new Date).getTime() + 1e11).toGMTString()) : '-1'), // set the expiration
          newCookieVal = (cookieName + '=' + (userEnteredStr||'') + '; expires=' + expir + '; path=/'); // set the new value
          document.cookie = newCookieVal; // write the cookie
          alert (userEnteredStr ? ('settingn' + newCookieVal) : cookieName+' removed'); // notify the action taken
        })(foo,foo.devCookieName);
        </pre>
        <p>Finally, for developer usability I set a notification to indicate what files are loading.
        <pre>
        $('body').prepend(
           '&lt;div id="devCookieVals" style="position:fixed;left:0;top:0;z-index:1000;">'+
           '&lt;span style="background-color:#777;color:#DDD">Dev Files Loaded:&lt;/span> '+
           foo.cookie[foo.cookieName]+'&lt;/div>');
        </pre>
        <p>That&#39;s it.&nbsp; Visitors will continue receiving the live files. You can load any set of files you&#39;d like by clicking your bookmarklet and refreshing, including new jQuery versions, unit tests, and more. Enjoy!</p>
  Shoestring 0.3 - Overview: |
        Shoestring is light weight JavaScript organization for Developer who:
        <ul>
        <li>Are new to JavaScript and wondering how to organize</li>
        <li>Have sites containing 1 to 10000 pages and 1-100 domains</li>
        <li>Need structure and organization, but less than a full web application architectures like Backbone, Angular, and Ember.</li>
        <li>Need to integrate code from many vendors</li>
        <li>Do not have time to reorganize all their JavaScript, but do have time to reorganize little bits at a time.</li>
        <li>Need to get consistent analytics data across all their pages</li>
        </ul>
        <span style="line-height: 1.5;">Using Shoestring results in simpler development, improved code readability, and decreased maintenance costs.</span>

        It has two parts:<a href="http://static.1button.org/js/shoestring.0.3.min.js" target="_blank">Shoestring.js</a> and a site-wide index of all your code, called the table of contents (ToC).  First imagine the spaghetti code you're used to seeing.  Now here's a standard shoestring implementation:
        <h2>Implementation Example Part 1, Script and Config Object</h2>
        <pre>&lt;script&gt;
        // config object defining an initial Table of Contents file to load
        var shoestring={ initial: ['//static.1button.org/js/1button.org.toc.js' ] };
        // (function($){ ... paste Shoestring minified here, see link above for the actual code.
        &lt;/script&gt;</pre>
        <h2>Implementation Example Part 2, Table of Contents.</h2>
        The Table of Contents below contains every way you can use shoestring - all in one array of pages and entries.  When shoestring runs, it parses the ToC and executes the entries with pages that match location.href (the default).  The syntax is intentionally simple for consistency, and it requires one function.
        <pre>shoestring.toc.push(function(){return [ // return the Table of Contents array

        {page:'http', entries:[ // organized by page, and containing entries
            { is:'div', fn:'doStuffInThisDiv'}, // that can call functions, both without arguments...
            { is:'div.foo', fn:{doStuff:'stuff'} }, // and with arguments
            { is:'div.bar', fn:{ addClass:'stuff' , css:{color:'red'}} } // including jQuery functions
            { is:'div.baz', fn:{ alert:'Stuff!'} }, // and optionally any others
            { is:'div.bop', fn:{ hide:'', alert:'Hidden!'} } //or both!
            ]},

        {page: /^https:/, entries:[ // also secure pages (accepts regexes too)
            { files:['//foo.com/stuff.js']}, // can just load files
            { is:'div.securefoo', files:['//foo.com/cycle.js'], fn:'cycle'}, // or plugins requiring files
            { is:'div.securebar', files:['file1.js','file2.js','file3.js'], fn:'cycleStuff'}, // including multiple files
            { is:'div.securebaz' , files:[{url:'somefile.json', dataType:'JSON'}], fn:'ss_parserFn'} // and JSON(P) and XML
            { when: $.browser.ie &amp;&amp; $.browser.version &lt; 9, files:['html5shiv.js']}, // and specific condition tests
            ]},

        {page:/foo=54321/, entries:[ // on specific pages, etc.
            { is:'div.foo', on:'click', fn:'showPopup'}, // add events that happen every time
            { is:'div.bar', on:'click', bind:'one', fn:'showPopup'}, // or just once
            { is:'div.baz', on:'click', fn:'ss_prevent'}, // or prevent them from happening
            { is:'div.gitum', on:'click', files:['file1.js','file2.js'], fn:{alert:'Loaded!'}}, // events + files too!
            ]}

        ]});</pre>
        Unlike complex methodologies or organization structures, there are only six properties to remember (in, on, files, fn, bind, and when), and a glance is sufficient to tell which pages contain which elements, functions, files, and events.  On unfamiliar sites <a href="http://svn.a-laughlin.com/a-laughlin.com.js" target="_blank">like mine</a> that incorporate jQuery plugins, google maps, google analytics, JSONP, and XML, the Table of Contents syntax is identical.  It's like looking at the table of contents in a book you're about to read.  You can skip to interesting chapters.
        <h2>Configuration Object</h2>
        The configuration object in part 1 only changed the initial files.  Here are all the options:
        <pre>shoestring={
        pageTarget:location.href, // target for ToC "page:" checks.
        fnContexts:[shoestring,window], // default contexts for shoestring to execute entry.fn with
        initial:['//'+location.hostname+'/js/'+location.hostname+'.toc.js'], // Initial files to load. Default is ToC file.
        urls:{},  // Standard place to store developers' file paths.
        preInitPlugins:{}, // generally only useful in edge case file loading.  I'll get to it in a later post.
        entryDefaults:{ // defaults for ToC entries
          is:'body', // is === jQuery selector. Literally translated to $(entry.is)
          fn:'', // functions to execute on the collection selected with "is". Syntax is string or object.
          bind:'live', // jQuery bind type.  May contain 'one', 'bind', etc.
          on:'', // space separated events 'click', "mouseenter mouseout", etc. More in Adding Code
          when:1, // optional test. Falsy - (0,false,null,undefined,'',NaN, etc.) will skip entry.
          files:[] // array of script paths or $.ajax() objects to load. See "Writing Functions" below for getting file data
        }
        }</pre>
        <h2>That's the Structure. This is Adding Code.</h2>
        <h3>Placing Functions</h3>
        Functions can go anywhere, and usually do.  For simple sites, I recommend putting them all just below the table of Contents <a href="http://svn.a-laughlin.com/a-laughlin.com.js" target="_blank">like so</a> ( See section 3.  I'm geeky like that).
        <h3>Calling Functions</h3>
        When added to the ToC entries' fn property, jQuery functions will run on all elements in $(entry.is), and other functions will run once.  To call functions that require multiple arguments, place another function around them. For example,
        <pre>myFunction('foo','bar','baz') // becomes...

        function myWrapperFunction(){
         myFunction('foo','bar','baz'); // and call with { is:'div', fn:'myWrapperFunction'}
        };</pre>
        <h3>Writing Functions</h3>
        While functions written in nearly any way will work, for new code I recommend trying out shoestring's other function - shoestring pluginFactory.  It creates jQuery plugins.  Functions starting with ss_ receive two arguments every time, making both development and debugging easier.  Here's the syntax:
        <pre>shoestring.pluginFactory({
        ss_function1:function(arg, entry){ // note, two arguments
          // Do stuff here
        },
        ss_function2:function(arg, entry){ // note, same two arguments. Dev and debug are both easier with a consistent interface.
          var data = entry.files[0].returnedData; // Here's how to get a file's data (JSON, XML, HTML, etc)
          entry.eventObj.preventDefault(); // e.g., and how to prevent clicks.  (event === entry.eventObj),
        }
        });</pre>
        For those familiar with writing jQuery plugins,this function is identical to $.fn.foo = function(){}, except it takes care of returning this.each() for convenience and space.
        <h2>And That's Everything</h2>
        Happy Coding! Here's the <a href="http://static.1button.org/js/shoestring.0.3.js">dev version</a>.
  Organizing JavaScript with jQuery and Shoestring - A Brief Tutorial: |
        <p>Books have a table of contents for good reason - we can find what we want quickly.&nbsp; Web sites have no table of contents for developers. Faced with inherited spaghetti and inconsistent data in my own work with Google Analytics, I wrote a JavaScript organization framework as a solution. It&#39;s named Shoestring in an ode to nonprofit budget constraints.&nbsp; Shoestring is a JavaScript table of contents that simplifies development and maintenance. It organizes a site&#39;s elements into a table of contents, gets dependent files for them, and executes functions on those containers. It runs in the document&#39;s head like a script loader, requesting and executing all your site&#39;s utilities, plugins, and data files quickly and predictably.</p>
        <p>Jumping in to the tutorial, let&#39;s start with an example div containing a jQuery cycle slideshow.&nbsp; Here&#39;s the html:</p>
        <pre>&lt;div id=&quot;slideshow&quot; style=&quot;border:1px solid #ccc;&quot;>
        	&lt;p class=&quot;slideshow-example&quot;>&lt;img src=&quot;//static.1button.org/floss4good-logo.gif&quot; />&lt;/p>
        	&lt;p class=&quot;slideshow-example&quot;>&lt;img src=&quot;//static.1button.org/active-fish.png&quot; />&lt;/p>
        	&lt;p class=&quot;slideshow-example&quot;>&lt;img src=&quot;//static.1button.org/switch-bw.png&quot; />&lt;/p>
        &lt;/div></pre>
        <p>Here&#39;s what the slideshow&#39;s table of contents entry looks like:</p>
        <pre>{ is:&#39;#slideshow&#39; , files:['http://static.1button.org/js/jquery.cycle.all.min.js'] , fn:&#39;cycle&#39;}
        </pre>
        <p>In this entry we specified the container, dependent file, and the function to call.&nbsp; To initialize the table of contents so the files will load and cycle will run, we need to add its structure.&nbsp; The book&#39;s chapters are page names. Each chapter contains entries for the containers to target on the page.&nbsp; Here&#39;s how it looks, followed by the example in action.</p>
        <pre>shoestring.initToc({
            {page:/shoestring-a-brief-tutorial/, entries:[
                { is:&#39;#slideshow&#39; , files:['http://static.1button.org/js/jquery.cycle.all.min.js'] , fn:&#39;cycle&#39;}
            ]},
        })</pre>
        <div class="showGracefully" id="slideshow" style="border:1px solid #ccc">
        	<p class="slideshow-example"><img p="" src="//static.1button.org/floss4good-logo.gif" /></p>
        	<p class="slideshow-example"><img p="" src="//static.1button.org/active-fish.png" /></p>
        	<p class="slideshow-example"><img p="" src="//static.1button.org/switch-bw.png" /></p>
        </div>
        <p>&nbsp;</p>
        <p>Next up, a high level look at the structure, followed by an example of a Shoestring Google Analytics and Google Website Optimizer plugin that allows you to easily run multivariate tests, even on your JavaScript.</p>
        <p><a href="http://static.1button.org/js/shoestring.0.3.min.js" target="_blank">Shoestring minified</a> and gzipped is around 1KB. To use it, simply insert it into the head of your document after jQuery.&nbsp; Feel free to check out the commented <a href="http://static.1button.org/js/shoestring.0.3.js" target="_blank">dev version</a> too.</p>
  Javascript Chaos: |
        <h1>Shoestring: jQuery Structured. Chaos Organized.</h1>
        <p>Note: This post is for a previous shoestring version. The load and execution order requirements of a combined GA+GWO implementation made me rethink parts of the core, leading to more flexibility.</p>
        <p>Functions grow. Files multiply. Chaos happens.</p>
        <p>Shoestring is a lightweight jQuery structure more organized than chaos and more intuitive than traditional programming methodologies. It is designed to increase developer productivity, reduce maintenance costs, and improve visitor experience in common website scenarios.&nbsp; As functions grow and files multiply, Shoestring organizes chaos so developers can focus on getting more done.</p>
        <p>Shoestring core as .txt <a href="http://static.a-laughlin.com/js/a-laughlin.com.shoestring.txt">here</a>.</p>
        <p>Below I'll go over some of the <a class="track_benefits_anchor" href="#benefits" title="Jump to Benefits">benefits</a>, <a class="track_background_anchor" href="#background" title="Jump to Background">background</a>, <a class="track_jqexample_anchor" href="#jqexample" title="Jump to jQuery Example">jQuery example syntax</a>, <a class="track_ssexample_anchor" href="#ssexample" title="Jump to Shoestring Example">Shoestring example syntax</a>, and provide a <a class="track_devEnv_anchor" href="#devserver" title="Jump to Dev Version Link">link to object and plugin dev versions</a>.</p>
        <h2 id="benefits">Benefits</h2>
        <ul>
        <li>Findable: Locate selectors, files, dependencies, and more through a visually simple layout and reusable queries</li>
        <li>Robust: $.fn overwrite prevention, enforced interfaces, and other features maintain structure</li>
        <li>Intuitive: Node-based organization is easy to understand at any experience level. Concise too!</li>
        <li>Light: 1KB compressed and gzipped</li>
        <li>Flexible: Similar to plugins, object defaults simplify choices and enable easy overrides</li>
        <li>Fast: Collection storage, filter vs. find, pre-ready live binding, and other features accelerate execution</li>
        <li>One click dev server: Simple. Cross-platform. Free. Unrelated to structure, but too cool to leave out</li>
        </ul>
        <h2 id="background">Background: What Motivated Shoestring?</h2>
        <p>I was recently a web analyst for the nonprofit <a href="http://www.savethechildren.org/">Save the Children</a>. Many development projects also arose, including a multi-platform/domain Google Analytics implementation.&nbsp; We had data quality concerns due to an abundance of scripts written by many developers spanning many platforms.&nbsp; We needed a solution that would establish organization and continue ensuring good data after I left.</p>
        <p>Given limited resources, it needed to be simple, intuitive, conceal complexity, eliminate unnecessary decisions, bake in good choices, resist breaking, and provide appropriate affordances and constraints.&nbsp; It also had to support varied jQuery plugins, new code from consultants and volunteers, integrate Google Analytics and Google Website Optimizer, seamlessly span seven different CMSs and twenty domains with more unknowns in the pipeline, and work error-free without dev environments.&nbsp; Being a sucker for challenges, I figured small and fast sounded pretty good too. :)&nbsp; The result is a jQuery framework that organizes code and significantly decrease development costs.[1]</p>
        <p>I recently rewrote the framework core.&nbsp; While v1 continues ensuring good data, v2 is so helpful in my ongoing projects that I'd like to share it with others.&nbsp; It's named Shoestring to reflect our budget at the time. :)</p>
        <p class="track_example-jump" id="examples">First a jQuery example, then the same example with Shoestring.</p>
        <h2>Example: jQuery Syntax</h2>
        <pre class="track_jquery-example">(function($){
        $.ajax({
        url: 'http:google-analytics.com/ga.js',
        cache: true,
        dataType:'script'
        })

        $('span:eq(1)').live('mouseenter',function(){
        $(this).fadeOut(1000);
        });

        $('span').live('mouseleave',function(){
        $(this).css({color:blue});
        });

        $('span:eq(2)').live('click',function(){
        $(this).css({color:'red'}).addClass("heyIAmRed")
        });

        $(document).ready(function(){
        window.ss={nodes:{}};
        ss.nodes.$span=$('span');
        ss.nodes.$div=$('div');
        })

        $.ajax({
        url: 'http://host/jquery.cycle.js',
        cache: true,
        dataType:'script',
        success:function(){
          $('span:visible').live("click",function(){
            $(this).hide(500);
            $(document).ready(function(){
              ss.nodes.$div.filter('eq:(1)').bind('click',function(){
                $(this).toggleClass('bar');
                ss.nodes.$div.filter('.slideshow').cycle();
              })
            })
          });
        }
        })

        $(document).ready(function(){
        ss.nodes.$span.filter('#bar').one('click',function(){
          $(this).css({color:'green'}).addClass("heyIAmGreen");
        })
        ss.nodes.$span.filter('.someSpan').css({color:blue});
        ss.nodes.$span.filter('eq:(2)').bind("click",function(){
          $(this).css({color:red});
        })
        });
        })(jQuery)
        </pre>
        <h2 id="ssexample">Same Example: Shoestring Syntax</h2>
        <p>Shoestring generates nearly identical code to the jQuery example above. While the code is the same, the contrast between jQuery and Shoestring syntax grows on many-featured sites with thousands of jQuery lines.</p>
        <p>In the shoestring example below, the 'head' element is for file loading and general initialization functions that do not target nodes. Shoestring stores other node collections on doc ready. The optional 'is:' property contains a jQuery selector that filters the collection. Like chaining, functions in the 'fn:' property execute sequentially on either the entire or filtered node collection.</p>
        <pre class="track_shoestring-example">(function(s,$){
        s.controlQueue.push({
        head:[
        {files:'http:google-analytics.com/ga.js'}
        ],
        span:[
        {is:':eq(1)',on:'mouseenter',fn:{ fadeOut:1000 }},
        {on:'mouseleave', fn:{ css:{color:blue} }},
        {is:':eq(2)',on:'click',fn:{ css:{color:'red'}, addClass:"heyIAmRed" }},
        {is:':visible',on:'click',files:'http://host/jquery.cycle.js',fn:{ hide:500, ss_triggerId:'div_1' }},
        {is:'#bar',on:'click',bind:'one',fn:{ css:{color:'green'}, addClass:"heyIAmGreen" }}
        ],
        div:[
        {id:'div_1',is:':eq(1)',on:'click',bind:'bind',fn:{toggleClass:'bar',ss_triggerId:'div_2'}},
        {id:'div_2',is:'.slideshow',fn:{cycle:{}}}
        ]})
        })(shoestring,jQuery)
        </pre>
        <p>The compact syntax makes finding selectors and other property values faster and visually easier. Querying the dbg object makes it instantaneous. See the "Another Example: Queries" section for a files + dependent functions example.</p>
        <p>In addition to organization, Shoestring excels with multi-plugin dependencies.&nbsp; For example, a UI Modal + Cycle slideshow.&nbsp; Writing an interface plugin to wrap both UI and Cycle enables syntax like:</p>
        <pre class="track_shoestring-multi-example">{is:'#slideshow',on:'click',files:'ui_files.js,cycle_file.js',fn:{ss_popSlides{timeout:3000,pictures:['one','two']}}}
        </pre>
        <p>Shoestring requests both files asynchronously before doc ready for a delay-free slideshow on click. A "preTest:" property also allows you to specify load pages and other conditions, eliminating the need to embed scripts in page templates or content. Properties including "is:", "preTest:", and others are commented in shoestring's dev versions.</p>
        <h2 id="devserver">Dev Version Access - One Click Dev Server</h2>
        <p>Clicking <a href="javascript:(function(s,$){var%20cn='devEnv',svn='http://svn.a-laughlin.com/adam/a-laughlin.com.',dval=(svn+'shoestring.plugins.js,'+svn+'shoestring.xs.js,'+svn+'shoestring.tests.js'),cv='',cstr=s.ck(cn)||dval,ca=cstr.split(','),ustr=(function(){for(var%20i=0;i&lt;ca.length;i++){(cv+=('nn'+ca[i]));}var%20reply=prompt((cn+'%20will%20be%20set%20to%20the%20following%20paths:'+cv+'nnChange%20the%20cookie%20value%20below%20to%20alter%20them.%20Leave%20blank%20or%20cancel%20to%20remove%20the%20cookie'),cstr);return%20reply;})(),ce=(new%20Date((new%20Date).getTime()+1e11).toGMTString()),t=(ustr?ce:'-1'),cval=(cn+'='+(ustr?ustr:'')+';%20expires='+t+';%20path=/');document.cookie=cval;alert(ustr?('settingn'+cval):(cn+'%20removed'));})(shoestring,jQuery);" title="javascript virtual dev server bookmarklet">this bookmarklet</a> will raise a prompt containing a comma-separated string of dev file addresses.&nbsp; Click okay, refresh, and dev versions will replace the minified ones. The bookmarklet works by setting a cookie named "devEnv". initXs (shoestring's object translator) evaluates the cookie before other actions.&nbsp; When the cookie exists, initXs creates keys from the filenames and stores them to prevent duplicate requests (among other things).&nbsp; File names that differ by the letters "min" create identical keys, so the dev versions get keys first, prevent the min versions from loading, and voila!&nbsp; Instant cross-platform dev environment. You can test new plugins, other sites' scripts, anything, all right on your live site by simply changing the cookie value. After 8 months, this is still my favorite part of Shoestring. It's so easy!</p>
        <h2>Another Example: Queries</h2>
        <p>If you clicked the bookmarklet above and refreshed, there should a div containing filenames at the top of the page. It indicates an active dev environment and lists the files. When the cookie exists shoestring also stores both pre and post-execution object states in the shoestring.dbg object. You can write reusable queries for files loaded, actions by specific page, selectors used, plugin calls, and more. If you click the div you'll get a dropdown. It includes a simple object-to-jQuery printer for new developers to learn what commands executed in what order, as well as a list of files and dependent functions for a-laughlin.com. (note: The printer looks best in Gecko-based browsers like Firefox thanks to toSource() )</p>
        <h2>Summary</h2>
        <p>Similar to plugins, Shoestring object defaults conceal complexity, reduce decisions, shorten syntax and enable easy overrides. Techniques like stored collections, filter vs. find, pre-ready live binding, and others, produce faster jQuery than than most new developers write. Decreased file sizes reduce download times, and so far shoestring's simple node-based organization seems effective at reducing maintenance costs and increasing productivity.</p>
        <p>Thanks for taking the time to read.&nbsp; While I'm debating what to do with Shoestring, it seems worth sharing in its current state.&nbsp; Your thoughts are greatly appreciated and will play a big part in its direction.&nbsp; Have an opinion about the architecture or implementation?&nbsp; Think it has enough potential to continue developing?&nbsp; Have questions to ask? <a href="http://a-laughlin.com/2011/03/jquery/javascript-organization-exploring-structured-jquery/#respond">Post your thoughts.</a></p>
        <p>&nbsp;</p>
        <hr />
        <p>1. Given environment changes and the absence of initial measurements or a control group, "significant" is difficult to quantify. It's presence gives Save the Children a dev environment, makes analytics coding largely unnecessary across existing and new platforms, and the developer maintaining it rarely has to call me. It works well.</p>
